plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
}

def targetVersion = project.hasProperty("mc_version") ? project.getProperty("mc_version") : "v1_21_7"

// 拼接 mod_version 和 targetVersion 成最终版本号
def modVersionBase = project.hasProperty("mod_version") ? project.mod_version : "1.0.0"
def finalModVersion = "${modVersionBase}+${targetVersion.replace('v', '').replace('_', '.')}"

//在 targetVersion 定义之后设置 project.version
version = finalModVersion

group = project.maven_group

base {
    archivesName = project.archives_base_name
}

def yarnMappings = [ // Find them @ https://maven.fabricmc.net/net/fabricmc/yarn/
        "v1_21_3": "1.21.3+build.1",
        "v1_21_4": "1.21.4+build.8",
        "v1_21_5": "1.21.5+build.1",
        "v1_21_6": "1.21.6+build.1",
        "v1_21_7": "1.21.7+build.2",
        "v1_21_8": "1.21.8+build.1"
]

def fabricApiVersions = [ // Find them @ https://modrinth.com/mod/fabric-api
        "v1_21_3": "0.112.0+1.21.3",
        "v1_21_4": "0.115.0+1.21.4",
        "v1_21_5": "0.119.5+1.21.5",
        "v1_21_6": "0.127.0+1.21.6",
        "v1_21_7": "0.128.2+1.21.7",
        "v1_21_8": "0.129.0+1.21.8"
]

def modMenuVersions = [ // Find them @ https://modrinth.com/mod/modmenu
        "v1_21_3": "12.0.0",
        "v1_21_4": "13.0.0",
        "v1_21_5": "14.0.0-rc.2",
        "v1_21_6": "15.0.0-beta.3",
        "v1_21_7": "15.0.0-beta.3",
        "v1_21_8": "15.0.0-beta.3"
]

def clothConfigVersions = [ // Find them @ https://modrinth.com/mod/cloth-config
        "v1_21_3": "16.0.143",
        "v1_21_4": "17.0.142",
        "v1_21_5": "18.0.145",
        "v1_21_6": "19.0.147",
        "v1_21_7": "19.0.147",
        "v1_21_8": "19.0.147" // Oh shoot, cloth-config does not support 1.21.8 yet so hope 1.21.6+ cloth config works
]

def loaderVersion= [
        "v1_21_3": "0.16.10",
        "v1_21_4": "0.16.10",
        "v1_21_5": "0.16.10",
        "v1_21_6": "0.16.14",
        "v1_21_7": "0.16.14",
        "v1_21_8": "0.16.14"
]

def requiredKeys = [yarnMappings, fabricApiVersions, modMenuVersions, clothConfigVersions, loaderVersion]
requiredKeys.each {
    if (!it.containsKey(targetVersion)) {
        throw new GradleException("missing targetVersion = ${targetVersion}")
    }
}

def versionedSrc = file("src/main/${targetVersion}/java")
sourceSets {
    main {
        java {
            setSrcDirs(["src/main/java"])
            def versionedPath = "src/main/${targetVersion}/java"
            if (file(versionedPath).exists()) {
                srcDir versionedPath
            }
        }
    }
}


loom {
    mods {
        "vein_mine" {
            sourceSet sourceSets.main
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.shedaniel.me/' }
    mavenCentral()
}

dependencies {
    // To change the versions see the gradle.properties file
//    minecraft "com.mojang:minecraft:1.21.6-rc1"
    minecraft "com.mojang:minecraft:${targetVersion.replace('v', '').replace('_','.')}"
    mappings "net.fabricmc:yarn:${yarnMappings[targetVersion]}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loaderVersion[targetVersion]}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${clothConfigVersions[targetVersion]}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${modMenuVersions[targetVersion]}" // Modmenu integration
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersions[targetVersion]}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    inputs.property "version", project.version
//    inputs.property "minecraft_version", targetVersion.replace('v', '').replace('_', '.')
    inputs.property "loader_version", loaderVersion[targetVersion]
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
//                "minecraft_version": "1.21.6-rc1",
                "minecraft_version": targetVersion.replace('v', '').replace('_', '.'),
                "loader_version": loaderVersion[targetVersion],
                "modmenu_version": modMenuVersions[targetVersion],
                "cloth_config_version": clothConfigVersions[targetVersion],
                "api_version":fabricApiVersions[targetVersion],
                "fabric": fabricApiVersions[targetVersion],
                "targetVersion": targetVersion
        )
    }

}


def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = "${project.archivesBaseName}-${targetVersion.replace('v', '')}-${project.version}"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
kotlin {
    jvmToolchain(23)
}